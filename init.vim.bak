" Install vim-plug if not installed
" TODO: Fix This
" if empty(glob('${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim'))

"  autocmd VimEnter * PlugInstall
" endif

set title
set bg=light
set go=a
set mouse=a
set nohlsearch
set clipboard+=unnamedplus
set noshowmode
set noruler
set laststatus=0
set noshowcmd
let mapleader=","

call plug#begin()
Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'}
Plug 'mfussenegger/nvim-lsp-compl'
Plug 'neovim/nvim-lspconfig'
Plug 'preservim/nerdtree'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.6' }
Plug 'vim-airline/vim-airline'
call plug#end()

" Some basics:
	nnoremap c "_c
	set nocompatible
	filetype plugin on
	syntax on
	set encoding=utf-8
	set number relativenumber
	set tabstop=4
	set shiftwidth=4
	set smarttab
	set showmatch
" Enable autocompletion:
	set wildmode=longest,list,full
" Disables automatic commenting on newline:
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Perform dot commands over visual blocks:
	vnoremap . :normal .<CR>
" Spell-check set to <leader>o, 'o' for 'orthography':
	map <leader>o :setlocal spell! spelllang=en_us<CR>
" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
	set splitbelow splitright
" Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
" Switch between buffers
	map <C-J> :bnext<CR>
	map <C-K> :bprev<CR>
" Close current buffer
	map <C-D> :bd!<CR>
" Replace ex mode with gq
	map Q gq

" Replace all is aliased to S.
	nnoremap S :%s//g<Left><Left>

" Run command in terminal and output in new buffer
map <leader>c :enew \| r !

" Save file as sudo on files that require root permission
	cabbrev w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Automatically deletes all trailing whitespace and newlines at end of file on save. & reset cursor position
 	autocmd BufWritePre * let currPos = getpos(".")
	autocmd BufWritePre * %s/\s\+$//e
	autocmd BufWritePre * %s/\n\+\%$//e
  	autocmd BufWritePre *.[ch] %s/\%$/\r/e " add trailing newline for ANSI C standard
  	autocmd BufWritePre * cal cursor(currPos[1], currPos[2])

" Turns off highlighting on the bits of code that are changed, so the line that is changed is highlighted but the actual text that has changed stands out on the line and is readable.
if &diff
    highlight! link DiffText MatchParen
endif

" Function for toggling the bottom statusbar:
let s:hidden_all = 0
function! ToggleHiddenAll()
    if s:hidden_all  == 0
        let s:hidden_all = 1
        set noshowmode
        set noruler
        set laststatus=0
        set noshowcmd
    else
        let s:hidden_all = 0
        set showmode
        set ruler
        set laststatus=2
        set showcmd
    endif
endfunction
nnoremap <leader>h :call ToggleHiddenAll()<CR>

" *** GOLANG LSP ***
" lua require'lspconfig'.gopls.setup{ on_attach = function(client, bufnr) require'lsp_compl'.attach(client, bufnr, { server_side_fuzzy_completion = false }) end, }

lua require'lspconfig'.gopls.setup{}

" *** VIM-AIRLINE CONFIG ***
" Show buffers in vim airline
let g:airline#extensions#tabline#enabled = 1

" *** NERD-TREE CONFIG ***
map <leader>n :NERDTreeToggle<CR>
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" if has('nvim')
"     let NERDTreeBookmarksFile = stdpath('data') . '/NERDTreeBookmarks'
" else
"     let NERDTreeBookmarksFile = '~/.vim' . '/NERDTreeBookmarks'
" endif

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
" terminal mode to normal mode
tnoremap <leader><Esc> :<C-\><C-n>

" Re-map exiting terminal mode to ctrl-space
" tnoremap <C-X> <C-\><C-n>:q<CR>
" tnoremap <C-x> <C-\><C-n>
" nnoremap <leader>tv :vsplit term://zsh<CR>
" nnoremap <leader>th :split term://zsh<CR>


" inoremap <C-k> <cmd>lua require'lsp_compl'.trigger_completion()<cr>
